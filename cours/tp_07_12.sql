-- Dans un nouveau schéma assos, créer les tables :
-- Adherents : AdherentId PK auto, nom  (vérif >3chars), prenom (vérif >3chars), date naissance date,AdresseId, numéro ss (unique), n°CIN (unique), tel , email .
-- Adresses : AdresseId, rue, numero, codepostal, localite
-- Inscriptions : AdherentId , ActiviteId, dateInscription
-- Activites : ActiviteId, nom (vérif >3chars), info, autorisation (unique), dateCreation date
-- -- tous les varchar2 à 50;
-- -1: Créer les tables   
-- 2- Créer les procédures stockées suivantes :
--           2.1 : PS qui ajoute un adhérent
--           2.2 : PS qui ajoute une activité
--           2.3 : PS qui ajoute une adresse, en vérifiant que le code postal existe dans la table des communes
--           2.4 : PS qui lie un adhérent à une activité
-- 3- Créer une fonction qui recherche un adhérent par son mail.         						
-- 4 -- Créer un script qui permet d’insérer :
-- 1000 enregistrements dans la table Adresses 
-- 10000 enregistrements dans la table Adhérents
-- 1000 Activités
-- lier tous les adhérents à des activités.
-- créer une requête qui recherche 1 adhérent en affichant, son adresse, ses activités et la date d’inscription.
-- Évaluer la requête.
-- Ajouter un index bitmap depuis la table des adhérents vers la table des adresses.
-- Multiplier le nombre d'enregistrements par 10 et refaire les requêtes.
-- Créer un trigger qui log les insertions pour les adhérents, puis estimer le coût d’un insert dans cette table.

correction TP ASSOS
[11:10]
create table Adherents (
    AdherentId NUMBER 
create table Adresses (
    AdresseId NUMBER GENERATED by default as IDENTITY,
    rue varchar2(50),
    numero int,
    codepostal varchar2(50),
    localite varchar2(50)
);
ALTER TABLE Adresses ADD CONSTRAINT Adresse_pk PRIMARY KEY 
ALTER TABLE Adherents ADD CONSTRAINT AdresseID_fk foreign KEY  (AdresseId) references Adresses(AdresseId);
-- Activites : ActiviteId, nom (vérif >3chars), info, autorisation (unique), dateCreation date
create table Activites (
    ActiviteId NUMBER GENERATED by default as IDENTITY,
    nom varchar2(50)  check (length(nom) > 3),
    info varchar2(50),
    autorisation varchar2(50) unique,
    date_creation date
);
ALTER TABLE Activites ADD CONSTRAINT Activite_pk PRIMARY KEY (ActiviteId);
[11:11]
create table Inscriptions (
create table Inscriptions (
ALTER TABLE Inscriptions 
create or replace PROCEDURE proc_Adherents 
(p_nom varchar2,p_prenom varchar2,p_date_naissance date,p_AdresseId int,p_numero_ss varchar2,p_n_CIN varchar2,p_tel number,p_email varchar2)
is
begin

   insert into Adherents (nom,prenom,date_naissance,AdresseId,numero_ss,n_CIN,tel,email)
   values(p_nom,p_prenom,p_date_naissance,p_AdresseId,p_numero_ss,p_n_CIN,p_tel,p_email);
end proc_Adherents;
create or replace PROCEDURE proc_activites 
(p_nom varchar2,p_info varchar2,p_autorisation varchar2,p_date_creation date)
as
begin 
   insert into Activites (nom,info,autorisation,date_creation)
   values(p_nom,p_info,p_autorisation,p_date_creation);
end proc_activites;
[11:11]
create or replace 
create or replace 
create or replace function fun_rech_mail (
p_mail varchar2) return number
is
v_adherentid number;
begin
   select adherentid into 
---------------
declare
v_rue Adresses.rue%type;
v_numero adresses.numero%type;
v_codepostal adresses.codepostal%type;
v_localite adresses.localite%type;
begin
 for i in 1 .. 1000
 loop
     v_rue := DBMS_RANDOM.string('a',20);
     v_codepostal := DBMS_RANDOM.string('a',5);
     v_localite := DBMS_RANDOM.string('a',20);
    insert into adresses (rue,numero,codepostal,localite) 
    values (v_rue,i+10,v_codepostal,v_localite);
 end loop;
end;

karima — Aujourd’hui à 11:26
declare
v_nom adherents.nom%type;
v_prenom adherents.prenom%type;
v_date_naissance adherents.date_naissance%type;
v_adresseid adherents.adresseid%type;
v_numero_ss adherents.numero_ss%type;
v_n_cin adherents.n_cin%type;
v_tel adherents.tel%type;
v_email adherents.email%type;
v_i number;
begin
    for i in 1 .. 10000
    loop
    v_i := i;
         v_nom := dbms_random.String('a',20);
         v_prenom := dbms_random.String('a',20);
        -- v_Adresseid := dbms_random.String('a',10);
        -- v_date_naissance := dbms_random.String('a',10);
         v_numero_ss := dbms_random.String('a',15);
         v_n_cin := dbms_random.String('a',15);
        --v_tel := dbms_random.String('a',10);
         v_email := dbms_random.String('a',20);
    insert into adherents (nom,prenom,date_naissance,AdresseId,numero_ss,n_CIN,tel,email)
    values (v_nom,v_prenom,sysdate,v_i,v_numero_ss,v_n_CIN,101010101,v_email);
    end loop;
    exception when others then
    dbms_output.put_line('echec avec i ='||v_i);
end;
[11:27]
le sharemycode de la correction du TP assos https://sharemycode.fr/ofr
ofr :: Sharemycode
Share live code snippets with anyone, anywhere. Aand keep control of it.
[11:29]
declare
v_nom activites.nom%type;
v_info activites.info%type;
v_autorisation activites.autorisation%type;
v_date_creation activites.date_creation%type;
begin
    for i in 1 .. 1000
    loop
        v_nom := dbms_random.String('a',20);
        v_info := dbms_random.String('a',30);
        v_autorisation := dbms_random.String('a',20);
       -- v_date_creation := dbms_random.String('a',10);
    insert into activites (nom,info,autorisation,date_creation)
    values (v_nom,v_info,v_autorisation,sysdate);
    end loop;
end;

karima — Aujourd’hui à 11:56
-- lier tous les adhérents à des activités.
select * from adherents order by adherentid; -- 102 à 4000
select * from activites order by activiteid; -- 1 à +2000
desc inscription;
create or replace procedure LierAdherentActivite (p_adherentId int, p_activiteId int) as
    v_adh int := 0;
    v_activ int := 0;
begin
    -- vérifier si le p_adherentId est correcte, 
    -- vérifier si le p_activiteId est correcte, 
    select count() into v_adh from adherents where adherentid =  p_adherentId;
    select count() into v_activ from activites where activiteid = p_activiteId;
    if v_adh = 0 or v_activ = 0 then
        dbms_output.put_line('Adhérent ou Activité inexstante !');
    else
        dbms_output.put_line('Adhérent et  Activité OK, début de traitement .... !');
        insert into inscriptions (ADHERENTID,ACTIVITEID,DATEINSCRIPTION) values (p_adherentId,p_activiteId,sysdate );
        dbms_output.put_line('fin de traitement');
    end if ;
end LierAdherentActivite;
exec LierAdherentActivite(1005,1000);
[11:56]
--- Modifier le script pour que la date d'inscription
-- soit passer en paramètres ---
create or replace procedure
LierAdherentActivite (p_adherentId int, p_activiteId int, p_date varchar2)
as
    v_adh int := 0;
    v_activ int := 0;
begin
    -- vérifier si le p_adherentId est correcte, 
    -- vérifier si le p_activiteId est correcte, 
    select count() into v_adh from adherents where adherentid =  p_adherentId;
    select count() into v_activ from activites where activiteid = p_activiteId;
    if v_adh = 0 or v_activ = 0 then
        dbms_output.put_line('Adhérent ou Activité inexstante !');
    else
        dbms_output.put_line('Adhérent et  Activité OK, début de traitement .... !');
        insert into inscriptions (ADHERENTID,ACTIVITEID,DATEINSCRIPTION)
        values (p_adherentId,p_activiteId,to_date(p_date,'dd/mm/yyyy') );
        dbms_output.put_line('fin de traitement');
    end if ;
    exception when others then
      dbms_output.put_line('Erreur de données en paramètres');
end LierAdherentActivite;
exec LierAdherentActivite(1006,1006,'31/12/2021');

karima — Aujourd’hui à 12:25
----------------------------------------------------
-- Mettre les procédures stockées précédantes dans un package
-- Rappel : un package est composé de 2 parties :
--- 1 spécifiction -- qui contient uniquement les déclaration 
--- 2 une partie Body qui contient les définitions
-- create or replace procedure LierAdherentActivite (p_adherentId int, p_activiteId int, p_date varchar2)
-- create or replace function fun_rech_mail (p_mail varchar2) return number
-- create or replace PROCEDURE proc_activites (p_nom varchar2,p_info varchar2,p_autorisation varchar2,p_date_creation date)
-- create or replace PROCEDURE proc_Adherents (p_nom varchar2,p_prenom varchar2,p_date_naissance date,p_AdresseId int,p_numero_ss varchar2,p_n_CIN varchar2,p_tel number,p_email varchar2)
create or replace package pkg_adherent as
    PROCEDURE proc_Adherents (p_nom varchar2,p_prenom varchar2,p_date_naissance date,p_AdresseId int,p_numero_ss varchar2,p_n_CIN varchar2,p_tel number,p_email varchar2);
    procedure LierAdherentActivite (p_adherentId int, p_activiteId int, p_date varchar2);
    function fun_rech_mail (p_mail varchar2) return number;
end pkg_adherent;
-- la parie body
create or replace package BODY pkg_adherent as
[12:25]
---------------------------------------------------------------
        PROCEDURE proc_Adherents (p_nom varchar2,p_prenom varchar2,p_date_naissance date,p_AdresseId int,p_numero_ss varchar2,p_n_CIN varchar2,p_tel number,p_email varchar2)
        is
        begin
           insert into Adherents (nom,prenom,date_naissance,AdresseId,numero_ss,n_CIN,tel,email)
           values(p_nom,p_prenom,p_date_naissance,p_AdresseId,p_numero_ss,p_n_CIN,p_tel,p_email);
        end proc_Adherents;
    ---------------------------------------------------------------
        procedure LierAdherentActivite (p_adherentId int, p_activiteId int, p_date varchar2)
        as
            v_adh int := 0;
            v_activ int := 0;
        begin
            -- vérifier si le p_adherentId est correcte, 
            -- vérifier si le p_activiteId est correcte, 
            select count() into v_adh from adherents where adherentid =  p_adherentId;
            select count() into v_activ from activites where activiteid = p_activiteId;
            if v_adh = 0 or v_activ = 0 then
                dbms_output.put_line('Adhérent ou Activité inexstante !');
            else
                dbms_output.put_line('Adhérent et  Activité OK, début de traitement .... !');
                insert into inscriptions (ADHERENTID,ACTIVITEID,DATEINSCRIPTION)
                values (p_adherentId,p_activiteId,to_date(p_date,'dd/mm/yyyy') );
                dbms_output.put_line('fin de traitement');
            end if ;
            exception when others then
              dbms_output.put_line('Erreur de données en paramètres');
        end LierAdherentActivite;
    ---------------------------------------------------------------
         function fun_rech_mail (p_mail varchar2) return number
        is
        v_adherentid number;
        begin
           select adherentid into v_adherentid from adherents where  email = p_mail;
           return v_adherentid; 
        end fun_rech_mail;
end pkg_adherent;