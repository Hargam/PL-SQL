------------------------------------------------------
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date,
date_fin date
);
-- Ajouter les contraintes date_debut >= sysdate
drop table produit1;
-- le script suivant ne fonctionne pas car on ne peut pas tester 
-- par rapprot à une variable : check (date_debut >= sysdate) ne fonctionne pas
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date check
(date_debut >= sysdate),
date_fin date
);
----------------------------------------
-- le script suivant ne fonctionnepas car dans le
-- check d'une colonne on ne peux pas faire référence à une autre colonne

Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date ,
date_fin date check
(date_fin >= date_debut)
);
--------- UTILISER UNE FONCTION
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date check
(Compare2SysDate
(date_debut) ='o'),
date_fin date
);
-- on ne peut pas utiliser de fonction -définie par l'utilisateur-
--dans un check
-------- focntion de comparaison avec sysdate
create or replace function Compare2SysDate
(p_date date)
return char
is
begin
  return case when p_date >= sysdate then 'o' else 'n' end
;
end;
-- tester la fonction 
select Compare2SysDate(sysdate-1)
from dual;
select Compare2SysDate(sysdate+1)
from dual;
--- le script suivant ne fonctionnera pas
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date check
(Compare2SysDate
(date_debut) ='o'),
date_fin date
);
-- on va définir une colonne qui aura comme resultat le retour
-- de la fonction et on compare cette colonne avec 'o'
-- pour celà on définit 
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date ,
date_fin date,
vdatedebut as
(cast
(Compare2SysDate
(date_debut) as char
(1)))
);
create or replace function Compare2SysDate
(p_date date)
return char
deterministic
is
begin
  return case when p_date >= sysdate then 'o' else 'n'  end
;
end;
-- rendre la fonction deterministic
create or replace function Compare2SysDate
(p_date date)
return char
is
v_aleatoire number
(2);
v_date date;
begin
 v_aleatoire := DBMS_RANDOM.VALUE
(1,100);
if (v_aleatoire mod 2 = 0) then
 v_date := p_date + v_aleatoire;
 else
  v_date := p_date - v_aleatoire;
end
if;
 
 return case when v_date >= sysdate then 'o ' else 'n '||v_aleatoire end ;
end;
select Compare2SysDate(sysdate-1)
from dual;
-- comment rendre une fonction non deterministic 
-- avec le même input --> avoir des résultats différents
drop table produit1;
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date ,
date_fin date,
vdatedebut as
(cast
(Compare2SysDate
(date_debut) as char
(1)))
check
(vdatedebut = 'o')
);
insert into produit1
  (designation,date_debut)
values
  ('desg 1', '1/12/2022');
insert into produit1
  (designation,date_debut)
values
  ('desg 1', '12/12/2022');

--------- ----------------- vérif date finproduit1
drop table produit1;
Create table produit1 (
id int generated by default as identity primary key,
designation varchar
(50),
date_debut date ,
date_fin date ,
vdatefin as
(cast
(Compare2SysDate
(date_fin) as char
(1))) check
(vdatefin ='o'),
vdatedebut as
(cast
(Compare2SysDate
(date_debut) as char
(1)))
check
(vdatedebut = 'o')
);

insert into produit1
  (designation,date_debut,date_fin)
values
  ('desg 1', '12/11/2022', '12/12/2022');
